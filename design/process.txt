fork():

New files: syscall/fork.c:
Description: Implementation of kernel fork system call: sys_fork():

Files to edit:
In kern/arch/mips/syscall/syscall.c, add a new test case for fork, case 0: and call sys_fork(). 
No arguments are passed - Just call the function.

New Data Structures:

PROCESS TABLE:

The data structure is maintained in the kernel for each process and would have the below parameters:

1. Pointer to the thread_t structure
2. PID
3. File table indicating the no of files open and their file descriptors
4. Status of the process - is anyone waiting on this process or is it ready to run?
5. List of PIDs of the Children
6. PPID - Parent process ID

FILE TABLE:
1. This is data structure contains information about the files opened by the process
2. Each descriptor points to a file structure which has the present offset in the file


PID generation Mechanism:
1. PIDs are allocated sequentially from 0 to MAX_USER_PROCESSES
2. NO of processe alive will be tracked by another Global varible, whose access will be synchornized through locks
3. Whether the PID is in use or not is maintained in bit map. After the PID reaches MAX, search starts from 0 to allocate the lowest PID available
4. allocated pids are stored in a PID table defined with MAX_USER_PROCESSES

Algorithm of sys_fork():

1. Find a free pid to allocate to the newly created process
2. Spawn a kernel thread immediately to handle the new process - call thread_fork() and pass, clone_address_space()
3. In clone_address_space():
	1. call as_copy() to create a copy of the existing address space
	2. Copy the trap frame and signal the parent that it can go back to user space
	3. Activate the new address space by calling as_activate()
	4. define the user space stack by calling as_define stack()
	5. set the entry point same as the current program counter
	6. set the return value to 0
	7. enter the user program by calling enter_new_process()

4. Set the return value to the pid of the child process in tf->tf_v0 and return

Synchronization:
1. The parent process should not go back to user mode untill the trapframe has been copied to the child process
2. The child process should not enter user space untill everything has been copied
